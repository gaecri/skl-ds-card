{"version":3,"file":"stories-components-template-skl-ds-card-skl-ds-card-stories.e415e593b0442fca29ed.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAnJA;AAqJA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-app/./src/stories/components/template/skl-ds-card/skl-ds-card.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './skl-ds-card.scss';\n\nimport { Icon } from './../../atoms/skl-ds-icon/skl-ds-icon';\nimport { Text } from './../../atoms/skl-ds-text/skl-ds-text';\nimport { Cover } from './../../atoms/skl-ds-cover/skl-ds-cover';\nimport { Divider } from './../../atoms/skl-ds-divider/skl-ds-divider';\nimport { Widget } from './../../molecules/skl-ds-widget/skl-ds-widget';\n\nimport cover from './../../../assets/cover.png';\n\nexport const Card = ({ state, textHeader, cardTitle, footerText }) => {\n  const [cardState, setCardState] = useState(state);\n  const [differenceInHours, setDifferenceInHours] = useState(null); // Inizializza come null\n  const [isFiveDaysLeft, setIsFiveDaysLeft] = useState(false);\n \n  useEffect(() => {\n    const TimeCalculation = () => {\n      const days1 = 20;\n      const hours1 = 2;\n      const days2 = 2;\n\n      const totalMilliseconds1 = (days1 * 24 * 60 * 60 * 1000) + (hours1 * 60 * 60 * 1000);\n      const totalMilliseconds2 = days2 * 24 * 60 * 60 * 1000;\n\n      const differenceMilliseconds = totalMilliseconds1 - totalMilliseconds2;\n      const differenceInHours = differenceMilliseconds / (60 * 60 * 1000); // da ms a ore\n\n      const differenceInDays = differenceMilliseconds / (24 * 60 * 60 * 1000);\n      setIsFiveDaysLeft(differenceInDays <= 5);\n\n      console.log(\"differenceInDays\", differenceInDays)\n\n      return differenceInHours;\n    };\n\n    const calculatedHours = TimeCalculation();\n    setDifferenceInHours(calculatedHours);\n  }, []); // Calcola solo al montaggio\n\n  useEffect(() => {\n\n    if (differenceInHours !== null) {\n      setWidgetData(prevWidgetData => prevWidgetData.map(data => ({\n        ...data,\n        text: data.text\n      })));\n    } \n  }, [differenceInHours]); \n\n  // Funzione per restituire il testo in base allo stato\n  const getTextByState = (state) => {\n    // if (differenceInHours === null) {\n    //   return 'Caricamento...'; // Mostra un messaggio mentre differenceInHours Ã¨ null\n    // }\n    switch (state) {\n      case 'normal':\n        return '20d 2h';\n      case 'important':\n        return `${differenceInHours}h`; // Mostra il valore di differenceInHours per 'important'\n      case 'expired':\n        return 'EXPIRED';\n      case 'done':\n        return 'YEAH';\n      default:\n        return 'N/D';\n    }\n  };\n\n  const [widgetData, setWidgetData] = useState([\n    { icon: 'handyman', iconSize: 'small', colorText: 'black', text: '3' },\n    { icon: 'child_care', iconSize: 'small', colorText: 'black', text: '80%' },\n    { icon: 'alarm', iconSize: 'small', colorText: cardState === 'important' ? 'white' : 'black', text: getTextByState(state)}, \n  ]);\n\n\n\n  return (\n    <div className={`skl-ds-card skl-ds-card--${cardState}`}>\n      <div className='skl-ds-card-header'>\n        <Text\n          tag={'p'}\n          children={textHeader}\n          fontSize={'small'}\n          color={cardState === 'important' ? 'white' : 'black'}\n        />\n      </div>\n\n      <div className='skl-ds-card-cover'>\n        <Cover\n          src={cover}\n        />\n        {cardState === 'expired' || cardState === 'done' ?\n          <div className='skl-ds-card-cover__overlay'>\n            <Icon\n              className='skl-ds-card-cover__overlayIcon'\n              iconName={cardState === 'expired' ? 'close' : 'check'}\n              color={cardState === 'expired' ? 'black' : 'white'}\n              iconSize={'xlarge'}\n            />\n          </div> : ''\n        }\n      </div>\n\n      <div className='skl-ds-card-body'>\n        <Text\n          className=\"skl-ds-card-body__title\"\n          tag={'h1'}\n          children={cardTitle}\n          fontSize={'medium'}\n          color={'black'}\n          bold\n        />\n\n        <Divider />\n\n        <div className='skl-ds-card-body__infos'>\n          {widgetData.map((data, index) => (\n            <Widget\n              key={index}\n              icon={data.icon}\n              iconSize={data.iconSize}\n              colorText={data.colorText}\n              text={data.text}\n            />\n          ))}\n        </div>\n\n        <Divider />\n\n        <div className='skl-ds-card-footer'>\n          <Text\n            tag={'p'}\n            children={footerText}\n            fontSize={'small'}\n            color={'black'}\n          />\n          <div className=\"skl-ds-card-footer__label\">\n            <Widget\n              orientation={'horizontal'}\n              icon={'favorite'}\n              iconSize={'small'}\n              colorText={'black'}\n              text={'00'}\n            />\n\n            <Widget\n              orientation={'horizontal'}\n              icon={'chat'}\n              iconSize={'small'}\n              colorText={'black'}\n              text={'00'}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  state: PropTypes.oneOf(['normal', 'important', 'expired', 'done']),\n  textHeader: PropTypes.string,\n  cardTitle: PropTypes.string,\n  footerText: PropTypes.string\n};\n\nCard.defaultProps = {\n  state: 'start',\n  textHeader: 'Emanuele',\n  cardTitle: 'This is a card title and can be at his maximum length about three lines. If the content exceeds you need to cut it.',\n  footerText: 'Lego'\n};\n"],"names":[],"sourceRoot":""}